plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id 'org.jetbrains.kotlin.jvm' version '2.0.20'
	id 'me.modmuss50.mod-publish-plugin' version '0.6.3'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'https://maven.nucleoid.xyz' }
	maven { url "https://maven.impactdev.net/repository/development/" }
	maven { url "https://maven.architectury.dev/"}
	maven { url "https://jitpack.io" }
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"gimme-that-gimmick" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

fabricApi {
	configureDataGeneration {
		client = true
		setModId("${project.modid}")
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Provi's library that adds datagen for enchantments.
	modImplementation include("com.github.Provismet:lilylib:${project.lilylib_version}")

	modImplementation "com.cobblemon:fabric:${project.cobblemon_version}"

	modImplementation "eu.pb4:polymer-core:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-common:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-blocks:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-resource-pack:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-virtual-entity:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-networking:${project.polymer_version}"
	
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

publishMods {
	file = remapJar.archiveFile
	additionalFiles.from(remapSourcesJar.archiveFile)
	changelog = file("changelog.md").text
	type = STABLE
	modLoaders.add("fabric")
	displayName = project.version.toString()
	dryRun = providers.environmentVariable("GITHUB_TOKEN").getOrNull() == null || providers.environmentVariable("MODRINTH_TOKEN").getOrNull() == null || providers.environmentVariable("CURSEFORGE_TOKEN").getOrNull() == null

	github {
		repository = "Provismet/${project.github_repo}"
		accessToken = providers.environmentVariable("GITHUB_TOKEN")
		commitish = "${project.github_branch}"
		tagName = "${project.mod_version}-mc${project.minecraft_version}"
		allowEmptyFiles = true
		displayName = "${project.mod_version} - ${project.minecraft_version}"
	}

	modrinth {
		projectId = project.modrinth_id
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		minecraftVersionRange {
			start = project.version_start
			end = project.version_end
		}
		requires("fabric-api")
		requires("cobblemon")
		requires("polymer")
	}

	curseforge {
		projectId = project.curseforge_id
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		clientRequired = false
		serverRequired = true
		minecraftVersionRange {
			start = project.version_start
			end = project.version_end
		}
		requires("fabric-api")
		requires("cobblemon")
		requires("polymer")
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			version = project.mod_version + "-mc" + project.minecraft_version
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}